"use client";

import { useState } from 'react';
import { createStripeProductAction } from '@/app/actions/stripe-actions';
import type { ProductData } from '@/lib/stripe-automation';
import { useAuth, useDesignerSwitcher } from '@/hooks/useAuth';

export function ProductSubmissionForm() {
  const { designer, isAuthenticated, isLoading } = useAuth();
  const { availableDesigners, switchToDesigner } = useDesignerSwitcher();
  
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    sizes: [] as string[],
    colors: [] as string[]
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<{
    type: 'success' | 'error' | null;
    message: string;
    stripeData?: any;
  }>({ type: null, message: '' });

  const handleSizeToggle = (size: string) => {
    setFormData(prev => ({
      ...prev,
      sizes: prev.sizes.includes(size) 
        ? prev.sizes.filter(s => s !== size)
        : [...prev.sizes, size]
    }));
  };

  const handleColorToggle = (color: string) => {
    setFormData(prev => ({
      ...prev,
      colors: prev.colors.includes(color) 
        ? prev.colors.filter(c => c !== color)
        : [...prev.colors, color]
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!designer) {
      setSubmitStatus({
        type: 'error',
        message: 'You must be logged in as a designer to submit products'
      });
      return;
    }

    setIsSubmitting(true);
    setSubmitStatus({ type: null, message: '' });

    try {
      // Validate form
      if (!formData.name || !formData.description || !formData.price) {
        throw new Error('Please fill in all required fields');
      }

      if (formData.sizes.length === 0 || formData.colors.length === 0) {
        throw new Error('Please select at least one size and one color');
      }

      // Create product data with authenticated designer info
      const productData: ProductData = {
        id: Date.now(), // In production, this would be generated by your database
        name: formData.name,
        description: formData.description,
        price: parseFloat(formData.price),
        currency: 'ron',
        designerName: designer.name, // From authentication
        designerId: designer.id, // From authentication
        sizes: formData.sizes,
        colors: formData.colors
      };

      // Automatically create Stripe product and price
      const stripeResult = await createStripeProductAction(productData);

      setSubmitStatus({
        type: 'success',
        message: `Product submitted successfully! Stripe integration created automatically.`,
        stripeData: stripeResult
      });

      // Reset form
      setFormData({
        name: '',
        description: '',
        price: '',
        sizes: [],
        colors: []
      });

    } catch (error) {
      setSubmitStatus({
        type: 'error',
        message: error instanceof Error ? error.message : 'An error occurred'
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const availableSizes = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];
  const availableColors = ['Black', 'White', 'Gray', 'Navy', 'Brown', 'Beige', 'Red', 'Blue'];

  // Loading state
  if (isLoading) {
    return (
      <div className="max-w-2xl mx-auto p-6 bg-zinc-900 rounded-lg">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
          <span className="ml-3 text-zinc-400">Loading designer profile...</span>
        </div>
      </div>
    );
  }

  // Not authenticated state
  if (!isAuthenticated || !designer) {
    return (
      <div className="max-w-2xl mx-auto p-6 bg-zinc-900 rounded-lg">
        <div className="text-center py-12">
          <h2 className="text-2xl font-bold mb-4 text-red-400">Designer Authentication Required</h2>
          <p className="text-zinc-400 mb-6">You must be logged in as a verified designer to submit products.</p>
          <button className="px-6 py-2 bg-white text-zinc-900 rounded-lg hover:bg-zinc-200 transition">
            Designer Login
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-2xl mx-auto p-6 bg-zinc-900 rounded-lg">
      {/* Designer Authentication Info */}
      <div className="mb-6 p-4 bg-zinc-800 rounded-lg border border-green-500/20">
        <div className="flex items-center gap-3 mb-2">
          <div className="w-10 h-10 bg-gradient-to-br from-green-400 to-green-600 rounded-full flex items-center justify-center text-white font-bold">
            {designer.name.split(' ').map(n => n[0]).join('')}
          </div>
          <div className="flex-1">
            <h3 className="font-semibold text-green-400">Logged in as Designer</h3>
            <p className="text-sm text-zinc-400">{designer.name}</p>
            {designer.bio && <p className="text-xs text-zinc-500 mt-1">{designer.bio}</p>}
          </div>
          <div className="flex items-center gap-2">
            {designer.verified ? (
              <span className="text-xs px-2 py-1 bg-green-500/20 text-green-400 rounded">✓ Verified</span>
            ) : (
              <span className="text-xs px-2 py-1 bg-yellow-500/20 text-yellow-400 rounded">⏳ Pending</span>
            )}
          </div>
        </div>
        
        <div className="flex items-center justify-between">
          <p className="text-xs text-zinc-500">
            Products will be attributed to your designer profile • Member since {new Date(designer.joinedDate).toLocaleDateString()}
          </p>
          
          {/* Designer Switcher for Demo */}
          <select 
            onChange={(e) => switchToDesigner(e.target.value)}
            value={designer.id}
            className="text-xs bg-zinc-700 border border-zinc-600 rounded px-2 py-1"
          >
            {availableDesigners.map(d => (
              <option key={d.id} value={d.id}>{d.name}</option>
            ))}
          </select>
        </div>
      </div>

      <div className="mb-6">
        <h2 className="text-2xl font-bold mb-2">Submit New Product</h2>
        <p className="text-zinc-400">
          Submit your product details. Stripe integration will be created automatically.
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label className="block text-sm font-medium mb-2">Product Name *</label>
          <input
            type="text"
            value={formData.name}
            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
            className="w-full p-3 bg-zinc-800 border border-zinc-700 rounded-lg focus:ring-2 focus:ring-white focus:border-transparent"
            placeholder="e.g., Elegant Silk Evening Dress"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Description *</label>
          <textarea
            value={formData.description}
            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
            rows={3}
            className="w-full p-3 bg-zinc-800 border border-zinc-700 rounded-lg focus:ring-2 focus:ring-white focus:border-transparent"
            placeholder="Describe your product..."
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Price (RON) *</label>
          <input
            type="number"
            step="0.01"
            min="0"
            value={formData.price}
            onChange={(e) => setFormData(prev => ({ ...prev, price: e.target.value }))}
            className="w-full p-3 bg-zinc-800 border border-zinc-700 rounded-lg focus:ring-2 focus:ring-white focus:border-transparent"
            placeholder="450.00"
            required
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-3">Available Sizes *</label>
          <div className="flex flex-wrap gap-2">
            {availableSizes.map(size => (
              <button
                key={size}
                type="button"
                onClick={() => handleSizeToggle(size)}
                className={`px-3 py-1 rounded border transition ${
                  formData.sizes.includes(size)
                    ? 'bg-white text-zinc-900 border-white'
                    : 'bg-zinc-800 border-zinc-600 hover:border-zinc-400'
                }`}
              >
                {size}
              </button>
            ))}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium mb-3">Available Colors *</label>
          <div className="flex flex-wrap gap-2">
            {availableColors.map(color => (
              <button
                key={color}
                type="button"
                onClick={() => handleColorToggle(color)}
                className={`px-3 py-1 rounded border transition ${
                  formData.colors.includes(color)
                    ? 'bg-white text-zinc-900 border-white'
                    : 'bg-zinc-800 border-zinc-600 hover:border-zinc-400'
                }`}
              >
                {color}
              </button>
            ))}
          </div>
        </div>

        {submitStatus.type && (
          <div className={`p-4 rounded-lg ${
            submitStatus.type === 'success' 
              ? 'bg-green-500/10 border border-green-500/20 text-green-400'
              : 'bg-red-500/10 border border-red-500/20 text-red-400'
          }`}>
            <p className="font-medium">{submitStatus.message}</p>
            {submitStatus.type === 'success' && submitStatus.stripeData && (
              <div className="mt-3 text-sm space-y-1">
                <p><strong>Designer:</strong> {designer.name} ({designer.id})</p>
                <p><strong>Stripe Product ID:</strong> {submitStatus.stripeData.productId}</p>
                <p><strong>Price ID:</strong> {submitStatus.stripeData.priceId}</p>
                <p><strong>Payment URL:</strong> <a href={submitStatus.stripeData.paymentLinkUrl} target="_blank" rel="noopener noreferrer" className="underline hover:text-green-300 transition">{submitStatus.stripeData.paymentLinkUrl}</a></p>
                <div className="mt-3 p-3 bg-green-600/20 border border-green-500/30 rounded">
                  <p className="text-green-300 font-medium">✅ REAL WORKING CHECKOUT!</p>
                  <p className="text-green-200 text-xs mt-1">
                    👆 Click the payment URL above to test the actual Stripe checkout.
                    This is a real payment link that will take you to Stripe's secure checkout page.
                  </p>
                </div>
                <p className="text-green-300 mt-2">🎉 Your product is now ready for sale once approved!</p>
              </div>
            )}
          </div>
        )}

        <button
          type="submit"
          disabled={isSubmitting || !designer?.verified}
          className={`w-full py-3 rounded-lg font-medium transition ${
            isSubmitting || !designer?.verified
              ? 'bg-zinc-700 text-zinc-400 cursor-not-allowed'
              : 'bg-white text-zinc-900 hover:bg-zinc-200'
          }`}
        >
          {isSubmitting ? 'Creating Product & Stripe Integration...' : 
           !designer?.verified ? 'Designer Verification Required' : 
           'Submit Product'}
        </button>
        
        {!designer?.verified && (
          <p className="text-xs text-yellow-400 text-center">
            Your designer account must be verified before you can submit products.
          </p>
        )}
      </form>

      <div className="mt-8 p-4 bg-zinc-800 rounded-lg">
        <h3 className="font-medium mb-2">🔄 Automatic Process</h3>
        <ul className="text-sm text-zinc-400 space-y-1">
          <li>• Product attributed to {designer.name} (ID: {designer.id})</li>
          <li>• Product details saved to database</li>
          <li>• Stripe product created automatically</li>
          <li>• Stripe price configured with RON currency</li>
          <li>• Payment link generated</li>
          <li>• Product queued for admin approval</li>
          <li>• Designer notified via email</li>
        </ul>
      </div>
    </div>
  );
} 